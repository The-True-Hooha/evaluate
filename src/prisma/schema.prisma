generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId     String       @id @default(uuid())
  email      String
  username   String
  role       Role         @default(BASIC)
  password   String
  submission Submission[]
  isEnabled  Boolean      @default(false)
  isVerified Boolean      @default(false)
  createdAt  DateTime     @default(now())
  course     Course?      @relation(fields: [courseId], references: [courseId])
  courseId   String?

  @@unique([email])
  @@unique([username])
}

model faculty {
  fid       String   @id @default(uuid())
  facultyId String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  password  String
  course    Course?  @relation(fields: [courseId], references: [courseId])
  courseId  String?

  @@unique([facultyId])
}

model Course {
  courseId          String              @id @default(uuid()) //pk
  major             String              @default("Computer Science")
  facultyname       String
  coursename        String
  academicyear      String
  academicterm      String
  activity          Activity[]
  LearningObjective LearningObjective[]
  User              User[]
  faculty           faculty[]

  @@unique([coursename])
}

model LearningObjective {
  learningObjId String     @id @default(uuid())
  description   String
  course        Course?    @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  activity      Activity[]
  courseId      String?
}

model Activity {
  activityId         String              @id @default(uuid())
  course             Course              @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  learningobjectives LearningObjective[]
  courseId           String
  topic              String
  points             Int
  numofattempts      Int
  availablefrom      DateTime
  availableto        DateTime
  codingActivity     CodingActivity?
}

model CodingActivity {
  codingactivityId String       @id @default(uuid())
  activity   Activity?    @relation(fields: [activityId], references: [activityId], onDelete: Cascade )
  activityId       String? @unique
  question         String
  Submission       Submission[]
}

model Submission {
  submissionId     String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [userId])
  activity         CodingActivity @relation(fields: [codingActivityId], references: [codingactivityId])
  sumbittedAt      DateTime       @default(now())
  userId           String
  codingActivityId String
}

enum Role {
  BASIC
  FACULTY
  SUPERUSER
}

enum Type {
  Coding
  MultipleChoice
  TrueFalse
  FillInBlank
  Matching
}

// a course has a many to many relationship with an activity ?? debating
